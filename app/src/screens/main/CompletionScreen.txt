import React, {useState} from 'react'
import { View, Text, Button } from 'react-native'
import { TopText, FlexView, InputTF, VFlex, HFlex, AtLabel, 
    BackArrow, InputDOB, ButtonPrimary, ButtonView, ProfileView, ImageSelectorTouchable,AvatarImage, AvatarImageUploadView } from '../../components/styled/components';
import Icon from 'react-native-vector-icons/FontAwesome'


export function CompletionScreen({navigation}){

    const [usernameText, setUsernameText]  = useState("")
    const [usernameIsActive, setUsernameIsActive] = useState(false)

    const [DOB, setDOB] = useState("")
    const [DOBIsActive, setDOBIsActive] = useState(false)
    // state variables for avatar
    const [avatarIsSelected, setAvatarIsSelected] = useState(false)
    const [avatarImageSource, setAvatarImageSource] = useState("https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/default-avatar.png")
    const [avatarImageData, setAvatarImageData] = useState("")
    
    function getAvatar(){

        if(avatarIsSelected){
            console.log("here: "+ avatarImageSource)
            return (
                <AvatarImage source={{uri: avatarImageSource}} />
            )
        }else{
            return (
                <AvatarImage source={{uri: "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/default-avatar.png"}} />
            )
        }
    }
    // imagepicker -> select image -> URI (image path) on their phone's storage 
        // imagePath -> Base64 string  -> this is called imageData

    async function handleSelectImage(){
        try{
            ImagePicker.openPicker({
                width: 400,
                height: 400,
                cropping: true
                }).then(image => {
                    let imagePath = "file://" + image.path;

                    //convert the image into base64
                    RNFS.readFile(imagePath, "base64")
                    .then((res) => {
                        //base64 string
                        let base64DataString = "data:" + image.mime + ';base64,' + res;
                        //console.log(base64DataString)
                        setAvatarIsSelected(true)
                        setAvatarImageSource(imagePath)
                        setAvatarImageData(base64DataString)
                        
                    }).catch((RNFSError) =>{
                        console.log(RNFSError);
                    })
                    // throw new Error("error created")
                }).catch(er => {
                    console.log(er);
                })
        }catch(e){
            console.log(e);
            let error = {
                errorMessage: "You need to select a profile picture.",
                errorStatus: "PROFILE_PIC_NOT_SELECTED"
            }
        }
    }

    return (
        <View style={{flex: 1, alignItems: 'center', justifyContent: 'center', backgroundColor: '#070A1E'}}>
            <TopText>
                <Text style={{color:"white"}}>PROFILE COMPLETION</Text>
            </TopText>

            <BackArrow onPress={() => navigation.goBack()}>
                <Icon name='angle-left' size={25} style={{color:"white"}}/>
            </BackArrow>

            <VFlex>
                <ImageSelectorTouchable 
                            onPress={() => handleSelectImage()}
                        />
                <AvatarImageUploadView >
                {getAvatar()}
                    {/* <Icon name='camera' size={25} style={{color:"white"}}/>
                    <Text style={{color:"white", fontSize:"11px", textAlign: "center", paddingTop: "10%"}}>UPLOAD OR CHOOSE FROM GALLERY</Text> */}
                </AvatarImageUploadView>
            </VFlex>
            <FlexView style={{paddingTop: "15%"}}>
                <HFlex>
                    <AtLabel active={usernameIsActive}>@</AtLabel>
                    <InputTF
                        placeholder="Username"
                        active={usernameIsActive} 
                        value={usernameText}
                        autoCapitalize="none"
                        onFocus={()=>{
                            setUsernameIsActive(true)
                        }}

                        onBlur={() =>{
                            setUsernameIsActive(false)
                        }}
                            onChangeText={(value) =>{
                            setUsernameText(value)
                            }}

                    />
                </HFlex>
                <HFlex>
                    <AtLabel active={DOBIsActive}><Icon name='calendar' size={30} style={AtLabel}/></AtLabel>
                    <InputDOB 
                    placeholder="MM/DD/YYYY"
                    active={DOBIsActive} 
                    value={DOB}
                    autoCapitalize="none"
                    onFocus={()=>{
                        setDOBIsActive(true)
                    }}

                    onBlur={() =>{
                        setDOBIsActive(false)
                    }}
                        onChangeText={(value) =>{
                        setDOB(value)
                        }}
                    />
                </HFlex>
            </FlexView>

            <ButtonView>
                <ButtonPrimary style={{bottom: "-15%"}}>
                    <Text style={{color:"white"}}>CONTINUTE</Text>
                </ButtonPrimary>
            </ButtonView>

        </View>
    );
}